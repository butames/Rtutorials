---
title: "Creating Maps in Leaflet"
author: "Seyram A. Butame"
format: 
  html: 
    theme: sandstone
    css: styles.css
    toc: true
    toc-depth: 3
    toc-location: left
    toc-title: Contents
    number-sections: true
    number-depth: 3
    font-family: Quicksand
---

![](~/Documents/GitHub/Rtutorials/tutorial01/img/Leaflet_logo.svg)



## Leaflet Concept Map

## Data

To start with, I am going to use data created by Prof. Lisa Lendway

## Main Functions

Leaflet employs a language pattern that is similar to ggplot, in that it uses layering.

1. We begin by creating a map widget by calling the `leaflet()` and detailing the data to be used.
2. We then add a base map using the `addTiles()` function. `addTiles()` is the default, but there is also `addProviderTiles()`. This is similar to adding `geoms` with ggplot.
3. We then build layers onto the map using layer functions, the most common of which include:
    - `addMarkers()`
    - `addPolygons()`
  
  These layer function add detail tot he base map.
  
4. Then we repeat step three until we are satisfied with the product.
5. It is then a matter of printing the map and displaying for all to see. Celebrate the smaller successes.


A standard way of representing data is to create points on a map. Here Leaflet comes in handy because you can create points on an imported base map using the methods shown above.
## Example

Before I show the example, Prof. created a package called `gardenR` that contains data to be used in the example. We call up the package below and read it in, to be able to use data.

The package is not available on CRAN and so you neeed to install it via devtools

```
devtools::install_github("llendway/gardenR")
```

### Exmaple - Libraries

```{r}

library(tidyverse)
library(leaflet)
library(gardenR)
library(sf)
library(viridis)
library(RColorBrewer)
library(htmltools)

```


### Example - Map

First we create a simple dataset has three variables, place, longitude, and latitude. This dataset is based on Prof. Lendway (I think it describes a number of her beloved places in the Saint Paul/Minneapolis area). Each location in the place column has a corresponding longitude (long) and latitude (lat) varibales critical to pinpointing the location of the place on a map.

```{r}
d1 <- data.frame(place = c("Home", "Macalester College", "Adams Spanish Immersion", "Spirit Gymnastics", "Bama & Bapa", "Now Bikes","Dance Spectrum", "Pizza Luce", "Brunson's"),
                 long = c(-93.1405743, -93.1712321, -93.1451796, -93.1650563, -93.1542883, -93.1696608, -93.1393172, -93.1524256, -93.0753863),
                 lat = c(44.950576, 44.9378965, 44.9237914, 44.9654609, 44.9295072, 44.9436813, 44.9399922, 44.9468848, 44.9700727)
  ) %>%
  as_tibble() 


#######

m1 <- leaflet(data = d1) %>% ## Calling up the data
  addTiles() %>% ## Adding the base map
  addMarkers() ## Adding markers to the map

m1

```


## Things to Note

1. leaflet will assume that the variables `long` and `lat` represent the longitude and latitude and will use that for its plot. You can specify longitude and latitude variables using the `lat` and `lng` (This is assuming that you have a dataset where you need to explicitly state the latitude and the longitude). You can also add a label to each of the points by

```{r}

m2 <- leaflet(data = d1) %>%
  addTiles() %>%
  addMarkers(lng = ~long,
             lat = ~lat,
             label = ~place) 

m2


```

So now when you hover over each of the points it reveals the names of the places as 


2. Because the base map is taken from the javascript library that is `Leaflet` you can do some things like zoom in and out. You can also change the type of base map that is shown. Note that `OpenStreetMap` is the default base map tiling that is used in conjunction with the `addTiles()`. However, with the `addProviderTiles()` funciton you can add third party tiles, such as the`Stamen.Toner` or the `Stamen.TonerLite` tile shown below.

```{r}

m3 <- leaflet(data = d1) %>%
  addProviderTiles(providers$Stamen.TonerLite) %>%
  addCircles(lng = ~long,
             lat = ~lat,
             label = ~place,
             weight = 10,
             opacity = 0.9,
             color = "RoyalBlue") 

m3

```

3. Another possible modification is to add polygon lines (via the `addPolyLines()` funcion) to your map. In this case, the lines are drawn connecting the points, in order with which they listed in the dataset.

```{r}

m4 <- leaflet(data = d1) %>%
  addProviderTiles(providers$Stamen.TonerLite) %>%
  addCircles(lng = ~long,
             lat = ~lat,
             label = ~place,
             weight = 10,
             opacity = 1,
             color = "#c85200") %>%
  addPolylines(lng = ~long,
               lat = ~lat,
               weight = 2,
               color = "#1170aa")
m4

```



## Choropleth Maps

### Data
For this exercise, we download the sample shapefile data via the `sf` package. The sfpackage, contains an example county level shapefile for North Carolina. Appended to the polygon information needed to create a choropleth map, Sudden Infant Death Syndrome (SIDS) sample data for North Carolina counties, two time periods (1974-78 and 1979-84). So to work with this data for this example, we need data that captures the number of SIDS per 1000 births in 1979 (i.e., sidbirth79). Our choropleth is going to be showing the number of SIDS per 1000 births in 1979 per county.

**Note** -- In a shapefile, the geometry column is where the data on boundaries are stored. Each cell contains data used to plot the outlines of Leaflet functions pull in the data from the geometry function.

```{r}
nc = st_read(system.file("shape/nc.shp", package="sf"),
             quiet = TRUE) %>%
  mutate(sidbirth79 = round((SID79/BIR79*1000), 2)) #Rounded to two decimals (i.e., 3 signficant figures)

# Create variable that denotes center of each county

ctycenter <- as_tibble(st_coordinates(st_centroid(nc))) %>%
  rename(centr_long = X,
         centr_lat = Y)

# Generate county names

ctynames <- st_drop_geometry(nc) %>%
  select(NAME, sidbirth79) %>%
  as_tibble()


# Place all center information (i.e., county center coordinates (ctycenter) and the center name into one variable). We do this by binding the respective dataframes by columns.

nccentroid <-  ctycenter %>% 
  bind_cols(ctynames)

```

### Map 01 - County Boundaries.

```{r}
m5 <- leaflet(nc) %>%
  addTiles() %>%
  addPolygons()

m5
```

The above produces the base map and superimposes the county boundaries generated by the geometry vector in the shapefile onto the base map, bound by the state borders.

### Map 02 - Choropleth Map

A choropleth map will color-in the polygons by a particular variable. In leaflet, what you do is create variable that contains color names, which you then apply to the choropleth.

The `viridis` package contains color scales to make plots that are pretty, better represent your data, easier to read by those with colorblindness, and print well in gray scale. More importantly the `viridis` package employs color-blind friendly scales.

```{r}
# create a function that can be used to map a variable to the color palette using the viridis package.

p1 <- colorNumeric("viridis",
                   domain = nc$sidbirth79)

head(p1(nc$sidbirth79)) ## To see the colors that have been selected for the map.

## You can use the palette function inside functions. 


## Create choropleth map where we color in the number of SIDS per 1000 births in 1979 per county (i.e., sidbirth79)

m6 <- leaflet(nc) %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~p1(sidbirth79),
    fillOpacity = 0.7
  )

m6
```

### Map 03 - Customize the Choropleth Map

Leaflet provides a lot of options for customizing a choropleth map. You can see from the above, that the map is not particularly clean looking (i.e., it is not visually appealing). Also it is not very informative, it lacks a legend, and just at a glance you have no idea what it is saying. You can customize the map to provide additional context that help with understanding, and also beautify the product.

For example in the map below we make the following changes within the `addPolygons()` function:

1. `stroke = FALSE` -- This removes the boarders from the county. The rational here is that we are using colors to give detail to the choropleth map. Therefore the color contrasts will enable us see the administrative region borders.

2. `fillColor = ~p1(sidbirth79)` -- As with the map above, this colors the counties using the function `p1` defined via the `viridis` package.

3. `fillOpacity = 0.7` -- Changes the trasparency of the polygon layer. It can be useful in the event that you have.

4. `smoothFactor = 0.5` -- This determines how much to simplify the plot when zooming in and out. Polygons, can contain a lot of detail, and so this function helps to determine the speed at which the resolution appears and the leve of detail. `smoothFactor` values range from 0 to 1.

5. The below chunk adds some interactivity. The `highlightOptions()` function stipulates certain characteristics of the polygons, that will need to stand out when you highlight them. 


```
highlight = highlightOptions(weight = 5, 
                                 color = "black",
                                 fillOpacity = 0.9,
                                 bringToFront = FALSE)
```
                                 
                                 
Already with these changes, our map looks a lot cleaner and more visually appealing. I may need to change the base layer map. That way the color scheme does not clash with the color scheme. Also the base layer contains a lot of details, roads, relief features, city names etc. This might be too much informaiton. It may be advisable to find a base layer that is less detailed.

```{r}
## Create a function to be used to map variable with a color palette generated via the viridis package

pal <- colorNumeric("viridis",
                   domain = nc$sidbirth79)

m7 <- leaflet(nc) %>%
  addProviderTiles(providers$Stamen.TonerLite) %>%
  addPolygons(
    stroke = FALSE,
    fillColor = ~pal(sidbirth79),
    fillOpacity = 0.7,
    smoothFactor = 0.7,
    highlight = highlightOptions(weight = 5, 
                                 color = "black",
                                 fillOpacity = 0.9,
                                 bringToFront = FALSE)
    ) %>%
  addLegend(pal = pal,
            values = ~sidbirth79, 
            opacity = 0.5, 
            title = "SIDS per 1000 births",
            position = "bottomright") 

m7

```


### Map 04 - Further Customizations

But there is more we can do with this custom map. For example we can add some further interactivity and point labels. We can create a tooltip, such that when you click on a county, there is a little popout with a name and the SIDS per 1000 births for that county.

-   The `addCircles()` adds a layer of circles on top of the polygons, and given we have calculated their centers they are shown at the geographic center of the county.
  - The longitude and latitude are specified using `lng =` and `lat =` respectively.
  - The tooltip is stipuated using `popup =`, where in we specify the information by mentioning the NAME column, and we add the sidbirth79 information, which we state to two decimal places. 
  - The radius of the circles are shown using `radius =` and the stated value there.


The `popup=` function creates 

```  
addCircles(data = nccentroid,
             lng = ~centr_long, 
             lat = ~centr_lat, 
             popup = ~paste(NAME,": ",
                            round(sidbirth79, 2),
                            sep=""),
             radius = 4)
```



```{r}
## Create a function to be used to map variable with a color palette generated via the viridis package

pal <- colorNumeric("viridis",
                   domain = nc$sidbirth79)

m8 <- leaflet(nc) %>%
  addPolygons(
    stroke = FALSE,
    fillColor = ~pal(sidbirth79),
    fillOpacity = 0.7,
    smoothFactor = 0.7,
    highlightOptions = highlightOptions(weight = 5, 
                                 color = "black",
                                 fillOpacity = 0.9,
                                 bringToFront = FALSE)) %>%
  addCircles(data = nccentroid,
             lng = ~centr_long, 
             lat = ~centr_lat, 
             popup = ~paste(NAME,": ",
                            round(sidbirth79, 2),
                            sep=""),
             radius = 4) %>% 
  
  addLegend(pal = pal,
            values = ~sidbirth79, 
            opacity = 0.5, 
            title = "SIDS per 1000 births",
            position = "bottomright") 

m8

```

### Map 05 - Alternative Customizations

Above we saw one way to create labels. However there is a simpler way. Which involves creating a variable (or vector), that is `labels` and populating that vector with data that we want in our label. Then simply using the `label =` option within the function stipulate the labels variable. 

```{r}

# pal <- colorNumeric("viridis", domain = nc$sidbirth79)
bins <- c(0.0, 0.55, 1, 1.55, 2, 2.55, 3, 3.55, 4, 4.55, 5, 5.55, 6, 6.55, 7)
pal <- colorBin("OrRd", domain = nc$sidbirth79, bins = bins)

labels <- sprintf(
  "<strong>%s</strong><br/>%g SIDS/1000 births",
  nc$NAME, nc$sidbirth79
) %>% lapply(HTML)



# lapply(HTML) -- Means you designate the contents in the pipe as HTML.

m9 <- leaflet(nc) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(
    fillColor = ~pal(sidbirth79),
    weight = 0.5,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 1,
    smoothFactor = 0.7,
    highlightOptions = highlightOptions(weight = 1, 
                                 color = "#666",
                                 dashArray = "",
                                 fillOpacity = 0.7,
                                 bringToFront = TRUE),
    label = labels,
    labelOptions = labelOptions(
    style = list("font-weight" = "normal", padding = "3px 8px"),
    textsize = "15px",
    direction = "auto")) %>%
  addLegend(pal = pal,
            values = ~sidbirth79, 
            opacity = 0.5,
            title = "SIDS per 1000 births in '79",
            position = "bottomright")

m9

```



---

Image Sources:

<a href="https://iconscout.com/lotties/salesman-holding-tablet" target="_blank">Salesman holding tablet Animated Illustration</a> by <a href="https://iconscout.com/contributors/terdpongdesign" target="_blank">Terdpongdesign</a>
